{"version":3,"sources":["enums/FilterToDosBy.ts","store/apiWithRedux.ts","store/toDosSlice.ts","store/index.ts","typedHooks/hooks.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["FilterToDosBy","toDosApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getToDos","query","getUserById","id","useGetToDosQuery","useGetUserByIdQuery","initialState","toDos","filterByQuery","filterCompletedToDos","all","isRandomized","toDosSlice","createSlice","name","reducers","setToDos","state","action","payload","removeToDoById","filter","toDo","setFilterByQuery","setFilterCompletedToDos","setIsRandomized","actions","selectors","pattern","toLowerCase","filtered","includePattern","title","includes","Number","completed","active","i","length","j","Math","floor","random","store","configureStore","reducer","toDoReducer","middleware","getDefaultMiddleware","concat","useAppSelector","useSelector","TodoList","React","memo","selectedUserId","setSelectedUserId","dispatch","useDispatch","useEffect","toDoToShow","selectorsToDo","className","type","value","onChange","target","classNames","onClick","map","checked","readOnly","userId","CurrentUser","clearSelectedUserId","String","pollingInterval","data","error","email","phone","App","useState","Root","rootStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ffd8cd8.chunk.js","sourcesContent":["export enum FilterToDosBy {\n  all,\n  active,\n  completed,\n}\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { ToDo } from '../types/ToDo';\nimport { User } from '../types/User';\n\nconst baseUrl = 'https://mate.academy/students-api';\n\nexport const toDosApi = createApi({\n  reducerPath: 'toDosApi',\n  baseQuery: fetchBaseQuery({ baseUrl }),\n  endpoints: (builder) => ({\n    getToDos: builder.query<Array<ToDo>, string>({\n      query: () => '/todos',\n    }),\n    getUserById: builder.query<User, string>({\n      query: (id) => `/users/${id}`,\n    }),\n  }),\n});\n\nexport const { useGetToDosQuery, useGetUserByIdQuery } = toDosApi;\n","// there I imported rootState because i use it in selectors for this inner state\n\n/* eslint-disable import/no-cycle */\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '.';\nimport { ToDo } from '../types/ToDo';\nimport { FilterToDosBy } from '../enums/FilterToDosBy';\n\ninterface FilterQueryState {\n  toDos: Array<ToDo>,\n  filterByQuery: string,\n  filterCompletedToDos: FilterToDosBy,\n  isRandomized: boolean,\n}\n\nconst initialState: FilterQueryState = {\n  toDos: [],\n  filterByQuery: '',\n  filterCompletedToDos: FilterToDosBy.all,\n  isRandomized: false,\n};\n\nexport const toDosSlice = createSlice({\n  name: 'toDos',\n  initialState,\n  reducers: {\n    setToDos: (state, action: PayloadAction<Array<ToDo>>) => {\n      state.toDos = action.payload;\n    },\n    removeToDoById: (state, action: PayloadAction<number>) => {\n      state.toDos = state.toDos.filter(toDo => toDo.id !== action.payload);\n    },\n    setFilterByQuery: (state, action: PayloadAction<string>) => {\n      state.filterByQuery = action.payload;\n    },\n    setFilterCompletedToDos: (state, action: PayloadAction<FilterToDosBy>) => {\n      state.filterCompletedToDos = action.payload;\n    },\n    setIsRandomized: (state, action: PayloadAction<boolean>) => {\n      state.isRandomized = action.payload;\n    },\n  },\n});\n\nexport const {\n  setToDos,\n  setFilterByQuery,\n  setFilterCompletedToDos,\n  setIsRandomized,\n  removeToDoById,\n} = toDosSlice.actions;\n\nexport const selectors = {\n  pureToDos: (state: RootState) => state.toDos.toDos,\n  filterByQuery: (state: RootState) => state.toDos.filterByQuery,\n  filterCompletedToDos: (state: RootState) => state.toDos.filterCompletedToDos,\n  isRandomized: (state: RootState) => state.toDos.isRandomized,\n  filteredAndSortedToDos: (state: RootState) => {\n    const {\n      filterByQuery,\n      toDos,\n      filterCompletedToDos,\n      isRandomized,\n    } = state.toDos;\n    const pattern = filterByQuery.toLowerCase();\n\n    const filtered = (toDos.filter(toDo => {\n      const title = toDo.title.toLowerCase();\n      const includePattern = title.includes(pattern);\n\n      switch (Number(filterCompletedToDos)) {\n        case FilterToDosBy.all:\n          return includePattern;\n\n        case FilterToDosBy.completed:\n          return includePattern && toDo.completed;\n\n        case FilterToDosBy.active:\n          return includePattern && !toDo.completed;\n\n        default:\n          return toDo;\n      }\n    }));\n\n    if (isRandomized) {\n      for (let i = filtered.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // eslint-disable-next-line no-param-reassign\n        [filtered[i], filtered[j]] = [filtered[j], filtered[i]];\n      }\n    }\n\n    return filtered;\n  },\n};\n\nexport default toDosSlice.reducer;\n","/* eslint-disable import/no-cycle */\nimport { configureStore } from '@reduxjs/toolkit';\nimport { toDosApi } from './apiWithRedux';\nimport toDoReducer from './toDosSlice';\n\nexport const store = configureStore({\n  reducer: {\n    toDos: toDoReducer,\n    [toDosApi.reducerPath]: toDosApi.reducer,\n  },\n\n  // eslint-disable-next-line max-len\n  middleware: (getDefaultMiddleware) => (getDefaultMiddleware().concat(toDosApi.middleware)),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { FilterToDosBy } from '../../enums/FilterToDosBy';\nimport { ToDo } from '../../types/ToDo';\nimport './TodoList.scss';\nimport {\n  selectors as selectorsToDo,\n  setToDos,\n  setFilterByQuery,\n  setFilterCompletedToDos,\n  setIsRandomized,\n  removeToDoById,\n} from '../../store/toDosSlice';\nimport { useAppDispatch, useAppSelector } from '../../typedHooks/hooks';\n\ntype Props = {\n  selectedUserId: number,\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>,\n  toDos: Array<ToDo>,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  selectedUserId,\n  setSelectedUserId,\n  toDos,\n}) => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(setToDos([...toDos]));\n  }, []);\n\n  const toDoToShow = useAppSelector(selectorsToDo.filteredAndSortedToDos);\n  const filterByQuery = useAppSelector(selectorsToDo.filterByQuery);\n  const filterCompletedToDos\n  = useAppSelector(selectorsToDo.filterCompletedToDos);\n  const isRandomized = useAppSelector(selectorsToDo.isRandomized);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__Filter-options\">\n        <label>\n          Title contain:\n          <input\n            type=\"text\"\n            value={filterByQuery}\n            onChange={({ target }) => {\n              dispatch(setFilterByQuery(target.value));\n            }}\n          />\n        </label>\n\n        <label>\n          Show only:\n          <select\n            value={filterCompletedToDos}\n            onChange={({ target }) => {\n              // eslint-disable-next-line max-len\n              dispatch(setFilterCompletedToDos(target.value as unknown as FilterToDosBy));\n            }}\n          >\n            <option value={FilterToDosBy.all}>\n              All\n            </option>\n\n            <option value={FilterToDosBy.active}>\n              Active\n            </option>\n\n            <option value={FilterToDosBy.completed}>\n              Completed\n            </option>\n          </select>\n        </label>\n\n        <button\n          className={classNames(\n            'button',\n            'TodoList__user-button',\n            {\n              'TodoList__user-button--selected':\n                isRandomized,\n            },\n          )}\n          type=\"button\"\n          onClick={() => {\n            dispatch(setIsRandomized(!isRandomized));\n          }}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {toDoToShow.map(toDo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !toDo.completed,\n                  'TodoList__item--checked': toDo.completed,\n                },\n              )}\n              key={toDo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={toDo.completed}\n                  readOnly\n                />\n                <p>{toDo.title}</p>\n              </label>\n\n              <div className=\"TodoList__btns-container\">\n                {toDo.userId && (\n                  <button\n                    className={classNames(\n                      'button',\n                      'TodoList__user-button',\n                      {\n                        'TodoList__user-button--selected':\n                        toDo.userId === selectedUserId,\n                      },\n                    )}\n                    type=\"button\"\n                    onClick={() => {\n                      setSelectedUserId(toDo.userId);\n                    }}\n                  >\n                    User&nbsp;#\n                    {toDo.userId}\n                  </button>\n                )}\n                <button\n                  className={classNames(\n                    'button',\n                    'TodoList__user-button',\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(removeToDoById(toDo.id));\n                  }}\n                >\n                  X\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport { useGetUserByIdQuery } from '../../store/apiWithRedux';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number;\n  clearSelectedUserId: () => void;\n};\n\nexport const CurrentUser: React.FC<Props>\n= React.memo(({ selectedUserId, clearSelectedUserId }) => {\n  // eslint-disable-next-line max-len\n  const { data, error } = useGetUserByIdQuery(String(selectedUserId), { pollingInterval: 0 });\n\n  return (\n    <>\n      { !error && data ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {data.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {data.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {data.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {data.phone}\n          </p>\n          <button\n            className=\"CurrentUser__btn-clear\"\n            type=\"button\"\n            onClick={clearSelectedUserId}\n          >\n            Clear\n          </button>\n        </div>\n      )\n        : (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>Loading Error</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              No user data\n            </h3>\n          </div>\n        )}\n    </>\n  );\n});\n","import { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n// import { selectors, setNewQuery } from './store/filterQuerySlice';\n// import { useAppSelector, useAppDispatch } from './typedHooks/hooks';\n\nimport './App.scss';\nimport { useGetToDosQuery } from './store/apiWithRedux';\n\nconst App = () => {\n  // eslint-disable-next-line max-len\n  const { data: toDos, error } = useGetToDosQuery('', { pollingInterval: 0 });\n\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const clearSelectedUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {!error && toDos ? (\n          <TodoList\n            toDos={toDos}\n            setSelectedUserId={setSelectedUserId}\n            selectedUserId={selectedUserId}\n          />\n        )\n          : (\n            <>\n              <h2>\n                Loading Error\n              </h2>\n              <h3>\n                No toDos data\n              </h3>\n            </>\n          )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              clearSelectedUserId={clearSelectedUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport rootStore from './store';\nimport App from './App';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst Root = () => (\n  <Provider store={rootStore}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}
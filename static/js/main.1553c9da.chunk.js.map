{"version":3,"sources":["enums/FilterToDosBy.ts","store/filterQuerySlice.ts","store/apiWithRedux.ts","store/index.ts","typedHooks/hooks.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["FilterToDosBy","filterQuerySlice","createSlice","name","initialState","text","reducers","setNewQuery","state","action","payload","actions","selectors","query","toDosApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getToDos","getUserById","id","useGetToDosQuery","useGetUserByIdQuery","store","configureStore","reducer","queryReducer","middleware","getDefaultMiddleware","concat","useAppSelector","useSelector","TodoList","React","memo","selectedUserId","setSelectedUserId","toDos","selectorsQuery","dispatch","useDispatch","useState","all","filterCompletedToDos","setFilterCompletedToDos","isRandomized","setIsRandomized","filter","useCallback","pattern","toLowerCase","toDo","includePattern","title","includes","Number","completed","active","randomize","arr","i","length","j","Math","floor","random","filteredArr","className","type","value","onChange","target","classNames","onClick","prevValue","map","checked","readOnly","userId","CurrentUser","clearSelectedUserId","String","pollingInterval","data","error","email","phone","App","Root","rootStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1553c9da.chunk.js","sourcesContent":["export enum FilterToDosBy {\n  all,\n  active,\n  completed,\n}\n","// there I imported rootState because i use it in selectors for this inner state\n\n/* eslint-disable import/no-cycle */\n\n// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\n\n/* eslint-disable no-param-reassign */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '.';\n\ninterface FilterQueryState {\n  text: string,\n}\n\nconst initialState: FilterQueryState = {\n  text: '',\n};\n\nexport const filterQuerySlice = createSlice({\n  name: 'query',\n  initialState,\n  reducers: {\n    setNewQuery: (state, action: PayloadAction<string>) => {\n      state.text = action.payload;\n    },\n  },\n});\n\nexport const { setNewQuery } = filterQuerySlice.actions;\n\nexport const selectors = {\n  query: (state: RootState) => state.query.text,\n};\n\nexport default filterQuerySlice.reducer;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { ToDo } from '../types/ToDo';\nimport { User } from '../types/User';\n\nconst baseUrl = 'https://mate.academy/students-api';\n\nexport const toDosApi = createApi({\n  reducerPath: 'toDosApi',\n  baseQuery: fetchBaseQuery({ baseUrl }),\n  endpoints: (builder) => ({\n    getToDos: builder.query<Array<ToDo>, string>({\n      query: () => '/todos',\n    }),\n    getUserById: builder.query<User, string>({\n      query: (id) => `/users/${id}`,\n    }),\n  }),\n});\n\nexport const { useGetToDosQuery, useGetUserByIdQuery } = toDosApi;\n","/* eslint-disable import/no-cycle */\nimport { configureStore } from '@reduxjs/toolkit';\nimport queryReducer from './filterQuerySlice';\nimport { toDosApi } from './apiWithRedux';\n\nexport const store = configureStore({\n  reducer: {\n    query: queryReducer,\n    [toDosApi.reducerPath]: toDosApi.reducer,\n  },\n\n  // eslint-disable-next-line max-len\n  middleware: (getDefaultMiddleware) => (getDefaultMiddleware().concat(toDosApi.middleware)),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '../store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport { FilterToDosBy } from '../../enums/FilterToDosBy';\nimport { ToDo } from '../../types/ToDo';\nimport './TodoList.scss';\nimport {\n  selectors as selectorsQuery,\n  setNewQuery,\n} from '../../store/filterQuerySlice';\nimport { useAppDispatch, useAppSelector } from '../../typedHooks/hooks';\n\ntype Props = {\n  selectedUserId: number,\n  setSelectedUserId: React.Dispatch<React.SetStateAction<number>>,\n  toDos: Array<ToDo>,\n};\n\nexport const TodoList: React.FC<Props> = React.memo(({\n  selectedUserId,\n  setSelectedUserId,\n  toDos,\n}) => {\n  const query = useAppSelector(selectorsQuery.query);\n  const dispatch = useAppDispatch();\n  // const visibleTodos = useAppSelector(toDosSelectors.visibleToDos);\n  const [filterCompletedToDos, setFilterCompletedToDos]\n    = useState(FilterToDosBy.all);\n  const [isRandomized, setIsRandomized] = useState(false);\n\n  const filter = useCallback(() => {\n    const pattern = query.toLowerCase();\n\n    return (toDos.filter(toDo => {\n      const title = toDo.title.toLowerCase();\n      const includePattern = title.includes(pattern);\n\n      switch (Number(filterCompletedToDos)) {\n        case FilterToDosBy.all:\n          return includePattern;\n\n        case FilterToDosBy.completed:\n          return includePattern && toDo.completed === true;\n\n        case FilterToDosBy.active:\n          return includePattern && toDo.completed === false;\n\n        default:\n          return toDo;\n      }\n    }));\n  }, [query, toDos, filterCompletedToDos]);\n\n  const randomize = useCallback((arr) => {\n    if (isRandomized) {\n      for (let i = arr.length - 1; i > 0; i -= 1) {\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // eslint-disable-next-line no-param-reassign\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n    }\n  }, [query,\n    toDos,\n    filterCompletedToDos,\n    isRandomized]);\n\n  const filteredArr = filter();\n\n  randomize(filteredArr);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__Filter-options\">\n        <label>\n          Title contain:\n          <input\n            type=\"text\"\n            value={query}\n            onChange={({ target }) => {\n              dispatch(setNewQuery(target.value));\n            }}\n          />\n        </label>\n\n        <label>\n          Show only:\n          <select\n            value={filterCompletedToDos}\n            onChange={({ target }) => {\n              setFilterCompletedToDos(target.value as unknown as FilterToDosBy);\n            }}\n          >\n            <option value={FilterToDosBy.all}>\n              All\n            </option>\n\n            <option value={FilterToDosBy.active}>\n              Active\n            </option>\n\n            <option value={FilterToDosBy.completed}>\n              Completed\n            </option>\n          </select>\n        </label>\n\n        <button\n          className={classNames(\n            'button',\n            'TodoList__user-button',\n            {\n              'TodoList__user-button--selected':\n                isRandomized,\n            },\n          )}\n          type=\"button\"\n          onClick={() => {\n            setIsRandomized((prevValue) => !prevValue);\n          }}\n        >\n          Randomize\n        </button>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {filteredArr.map(toDo => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !toDo.completed,\n                  'TodoList__item--checked': toDo.completed,\n                },\n              )}\n              key={toDo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={toDo.completed}\n                  readOnly\n                />\n                <p>{toDo.title}</p>\n              </label>\n\n              <button\n                className={classNames(\n                  'button',\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                      toDo.userId === selectedUserId,\n                  },\n                )}\n                type=\"button\"\n                onClick={() => {\n                  setSelectedUserId(toDo.userId);\n                }}\n              >\n                User&nbsp;#\n                {toDo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport { useGetUserByIdQuery } from '../../store/apiWithRedux';\nimport './CurrentUser.scss';\n\ntype Props = {\n  selectedUserId: number;\n  clearSelectedUserId: () => void;\n};\n\nexport const CurrentUser: React.FC<Props>\n= React.memo(({ selectedUserId, clearSelectedUserId }) => {\n  // eslint-disable-next-line max-len\n  const { data, error } = useGetUserByIdQuery(String(selectedUserId), { pollingInterval: 0 });\n\n  return (\n    <>\n      { !error && data ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {data.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {data.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {data.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {data.phone}\n          </p>\n          <button\n            className=\"CurrentUser__btn-clear\"\n            type=\"button\"\n            onClick={clearSelectedUserId}\n          >\n            Clear\n          </button>\n        </div>\n      )\n        : (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>Loading Error</span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">\n              No user data\n            </h3>\n          </div>\n        )}\n    </>\n  );\n});\n","import { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n// import { selectors, setNewQuery } from './store/filterQuerySlice';\n// import { useAppSelector, useAppDispatch } from './typedHooks/hooks';\n\nimport './App.scss';\nimport { useGetToDosQuery } from './store/apiWithRedux';\n\nconst App = () => {\n  // eslint-disable-next-line max-len\n  const { data: toDos, error } = useGetToDosQuery('', { pollingInterval: 0 });\n\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const clearSelectedUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {!error && toDos ? (\n          <TodoList\n            toDos={toDos}\n            setSelectedUserId={setSelectedUserId}\n            selectedUserId={selectedUserId}\n          />\n        )\n          : (\n            <>\n              <h2>\n                Loading Error\n              </h2>\n              <h3>\n                No toDos data\n              </h3>\n            </>\n          )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              selectedUserId={selectedUserId}\n              clearSelectedUserId={clearSelectedUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport rootStore from './store';\nimport App from './App';\n\nimport './App.scss';\nimport './styles/general.scss';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={rootStore}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}